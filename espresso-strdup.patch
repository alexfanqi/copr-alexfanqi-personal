diff --git a/src/cvrin.c b/src/cvrin.c
index e100cfb..e9cd655 100644
--- a/src/cvrin.c
+++ b/src/cvrin.c
@@ -104,7 +104,7 @@ void read_cube(register FILE *fp, pPLA PLA) {
 
         for(i = first; i <= last; i++) {
           if (PLA->label[i] == (char *) NULL) {
-            PLA->label[i] = _strdup(token);	/* add new label */
+            PLA->label[i] = strdup(token);	/* add new label */
             set_insert(cf, i+offset);
             break;
           } else if (equal(PLA->label[i], token)) {
@@ -314,7 +314,7 @@ loop:
         for(var = 0; var < cube.num_binary_vars; var++) {
           (void) get_word(fp, word);
           i = cube.first_part[var];
-          PLA->label[i+1] = _strdup(word);
+          PLA->label[i+1] = strdup(word);
           PLA->label[i] = ALLOC(char, strlen(word) + 6);
           (void) sprintf(PLA->label[i], "%s.bar", word);
         }
@@ -328,7 +328,7 @@ loop:
         var = cube.num_vars - 1;
         for(i = cube.first_part[var]; i <= cube.last_part[var]; i++) {
           (void) get_word(fp, word);
-          PLA->label[i] = _strdup(word);
+          PLA->label[i] = strdup(word);
         }
       /* .label assigns labels to multiple-valued variables */
       } else if (equal(word, "label")) {
@@ -343,7 +343,7 @@ loop:
 
         for(i = cube.first_part[var]; i <= cube.last_part[var]; i++) {
           (void) get_word(fp, word);
-          PLA->label[i] = _strdup(word);
+          PLA->label[i] = strdup(word);
         }
       } else if (equal(word, "symbolic")) {
         symbolic_t *newlist, *p1;
@@ -534,7 +534,7 @@ int read_pla(FILE *fp, int needs_dcset, int needs_offset, int pla_type, pPLA *PL
 
     for(i = 0; i < cube.part_size[second]; i++) {
       PLA->label[i + cube.first_part[second]] =
-        _strdup(PLA->label[i + cube.first_part[third]]);
+        strdup(PLA->label[i + cube.first_part[third]]);
     }
 
     cube.part_size[second] += cube.part_size[cube.num_vars-1];
@@ -791,7 +791,7 @@ int read_symbolic(FILE *fp, pPLA PLA, char *word, symbolic_t **retval)
   if (equal(word, ";"))
       break;
   labelp = ALLOC(symbolic_label_t, 1);
-  labelp->label = _strdup(word);
+  labelp->label = strdup(word);
   labelp->next = NIL(symbolic_label_t);
   if (prev_labelp == NIL(symbolic_label_t)) {
       newlist->symbolic_label = labelp;
diff --git a/src/main.c b/src/main.c
index 8b27e29..bbf06fa 100644
--- a/src/main.c
+++ b/src/main.c
@@ -630,7 +630,7 @@ void getPLA(int opt, int argc, char **argv, int option, pPLA *PLA, int out_type)
 	fprintf(stderr, "%s: Unable to find PLA on file %s\n", argv[0], fname);
 	exit(1);
     }
-    (*PLA)->filename = _strdup(fname);
+    (*PLA)->filename = strdup(fname);
     filename = (*PLA)->filename;
 /*    (void) fclose(fp);*/
 /* hackto support -Dmany */
diff --git a/src/pair.c b/src/pair.c
index 9f4d298..1dbd0e2 100644
--- a/src/pair.c
+++ b/src/pair.c
@@ -72,13 +72,13 @@ void set_pair1(pPLA PLA, int adjust_labels)
       var1bar = oldlabel[ (pair->var1[var]-1) * 2];
       var2bar = oldlabel[ (pair->var2[var]-1) * 2];
       (void) sprintf(scratch, "%s+%s", var1bar, var2bar);
-      PLA->label[newvar] = _strdup(scratch);
+      PLA->label[newvar] = strdup(scratch);
       (void) sprintf(scratch, "%s+%s", var1bar, var2);
-      PLA->label[newvar+1] = _strdup(scratch);
+      PLA->label[newvar+1] = strdup(scratch);
       (void) sprintf(scratch, "%s+%s", var1, var2bar);
-      PLA->label[newvar+2] = _strdup(scratch);
+      PLA->label[newvar+2] = strdup(scratch);
       (void) sprintf(scratch, "%s+%s", var1, var2);
-      PLA->label[newvar+3] = _strdup(scratch);
+      PLA->label[newvar+3] = strdup(scratch);
   }
   /* Copy the old labels for the unpaired binary vars */
   i = 0;
